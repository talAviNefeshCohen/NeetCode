use std::collections::{HashMap, HashSet};

impl Solution {
    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {
        // pre solution thinking.
        // i think using 3 sets one for rows one for columns 
        // and one for should do the trick.
        let mut row_to_val:HashMap<usize,HashSet<char>> = HashMap::with_capacity(9);
        let mut col_to_val:HashMap<usize,HashSet<char>> = HashMap::with_capacity(9);
        let mut box_to_val:HashMap<(usize,usize),HashSet<char>> = HashMap::with_capacity(9);
        for (row_idx,row) in board.iter().enumerate(){
            for (col_idx,&val) in row.iter().enumerate(){
                if val != '.' {
                    // key calculations
                    let row_key = row_idx;
                    let col_key = col_idx;
                    let box_key = (row_key / 3, col_idx / 3);
                    // set creation incase set dosent exist yet(this can be done outside but i dont see much value
                    // in it)
                    let row_set = row_to_val.entry(row_key).or_insert_with(HashSet::new);
                    let col_set = col_to_val.entry(col_key).or_insert_with(HashSet::new);
                    let box_set = box_to_val.entry(box_key).or_insert_with(HashSet::new);
                    // insert on a set return false if the value is already there, so if any of the sets
                    // already contained the value the && clause will return false its negation will 
                    // make it true and we will return true.
                    if !(row_set.insert(val) && col_set.insert(val) && box_set.insert(val)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}